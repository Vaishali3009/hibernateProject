package com.rbs.bdd.application.service;

import com.rbs.bdd.application.exception.SchemaValidationException;
import com.rbs.bdd.application.service.AccountValidationService;
import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.JAXBElement;
import jakarta.xml.bind.Unmarshaller;
import jakarta.xml.soap.MessageFactory;
import jakarta.xml.soap.SOAPBody;
import jakarta.xml.soap.SOAPMessage;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.ws.WebServiceMessage;
import org.springframework.ws.soap.saaj.SaajSoapMessage;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;
import java.io.*;

import static org.junit.jupiter.api.Assertions.*;

class AccountValidationServiceTest {

    private AccountValidationService accountValidationService;

    @BeforeEach
    void setup() {
        accountValidationService = new AccountValidationService();
    }

    @Test
    void testValidateSchemaAndBusinessLogicFromSoapEnvelope() throws Exception {
        // Load SOAP XML from file
        InputStream xml = getClass().getClassLoader().getResourceAsStream("static-request/static-request.xml");
        assertNotNull(xml);

        // Parse into SOAPMessage
        SOAPMessage soapMessage = MessageFactory.newInstance().createMessage(null, xml);
        SOAPBody body = soapMessage.getSOAPBody();

        // Extract the target request node
        Node payloadNode = body.getElementsByTagNameNS("*", "validateArrangementForPayment").item(0);
        assertNotNull(payloadNode);

        // Unmarshal payload to Java object
        JAXBContext jaxbContext = JAXBContext.newInstance(ValidateArrangementForPaymentRequest.class);
        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
        JAXBElement<ValidateArrangementForPaymentRequest> jaxbElement =
                unmarshaller.unmarshal(payloadNode, ValidateArrangementForPaymentRequest.class);

        ValidateArrangementForPaymentRequest request = jaxbElement.getValue();
        assertNotNull(request);

        // Prepare a test response message
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        WebServiceMessage message = new SaajSoapMessage(MessageFactory.newInstance().createMessage());
        ((SaajSoapMessage) message).setSoapAction("dummy");

        // Act
        accountValidationService.validateSchema(request); // No exception expected
        accountValidationService.validateBusinessRules(request, message);

        // Verify modified SOAP output
        message.writeTo(outputStream);
        byte[] modifiedXmlBytes = outputStream.toByteArray();

        var doc = DocumentBuilderFactory.newInstance().newDocumentBuilder()
                .parse(new ByteArrayInputStream(modifiedXmlBytes));
        XPath xpath = XPathFactory.newInstance().newXPath();

        String systemId = xpath.evaluate("//*[local-name()='systemId']", doc);
        String txnId = xpath.evaluate("//*[local-name()='transactionId']", doc);

        assertEquals("ModifiedESP", systemId);
        assertEquals("ModifiedTxn123", txnId);
    }
}
