package com.rbs.bdd.application.service;

import com.rbs.bdd.generated.ValidateArrangementForPaymentRequest;
import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.JAXBElement;
import jakarta.xml.bind.Unmarshaller;
import jakarta.xml.soap.MessageFactory;
import jakarta.xml.soap.SOAPBody;
import jakarta.xml.soap.SOAPMessage;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.ws.WebServiceMessage;
import org.springframework.ws.soap.saaj.SaajSoapMessage;

import javax.xml.namespace.QName;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;

import static org.junit.jupiter.api.Assertions.*;

class AccountValidationServiceTest {

    private AccountValidationService accountValidationService;

    @BeforeEach
    void setUp() {
        accountValidationService = new AccountValidationService();
    }

    @Test
    void testValidateSchemaAndBusinessLogicFromSoapEnvelope() throws Exception {
        // Step 1: Load full SOAP envelope XML
        InputStream xmlStream = getClass().getClassLoader()
                .getResourceAsStream("static-request/static-request.xml");
        assertNotNull(xmlStream, "static-request.xml not found in classpath");

        // Step 2: Parse with SAAJ
        MessageFactory factory = MessageFactory.newInstance();
        SOAPMessage soapMessage = factory.createMessage(null, xmlStream);

        // Step 3: Extract payload (validateArrangementForPayment) from body
        SOAPBody body = soapMessage.getSOAPBody();
        assertNotNull(body.getFirstChild(), "SOAP body is empty");

        // Step 4: JAXB unmarshal from payload node
        JAXBContext jaxbContext = JAXBContext.newInstance(ValidateArrangementForPaymentRequest.class);
        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();

        JAXBElement<ValidateArrangementForPaymentRequest> jaxbElement =
                unmarshaller.unmarshal(body.getFirstChild(), ValidateArrangementForPaymentRequest.class);
        ValidateArrangementForPaymentRequest request = jaxbElement.getValue();

        // Step 5: Prepare a mock WebServiceMessage for the response
        SOAPMessage responseSoap = factory.createMessage();
        WebServiceMessage responseMessage = new SaajSoapMessage(responseSoap);

        // Step 6: Run schema validation
        assertDoesNotThrow(() -> accountValidationService.validateSchema(request));

        // Step 7: Apply business logic (modifies SOAP message)
        assertDoesNotThrow(() -> accountValidationService.validateBusinessRules(request, responseMessage));

        // Optional: Print response
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        responseMessage.writeTo(out);
        System.out.println("Modified SOAP Response:\n" + out);
    }
}
